;
; MSX1 mouse test program
; Danjovic 2019
; 

INCLUDE "msx_constants.inc"
INCLUDE "msxbios.inc"
INCLUDE "msx_system_vars.inc"

; screen1, width32 color 15,1,4

LD A,32        ; width 32
LD (LINL32),A

LD A,15        ; color 15,1,1
LD (FORCLR),A
LD A,4
LD (BDRCLR),A
LD A,1
LD (BAKCLR),A
; LD A,1
CALL CHGMOD    ;  A=1 Screen1
CALL ERAFNK    ; keyoff INIFNK

; define sprite size 16x16
LD A,(RG1SAV)  ; mirror do registro 1 do VDP
SET 1,A        ; liga bit 1 - sprites 16x16
LD B,A
LD C,1
CALL WRTVDP    ; ativa sprites 16x16

; define 4 sprite shapes
LD HL,SpritePatterns
LD DE,14336 ;(ATRBAS)
LD BC,4*32
CALL LDIRVM


; initialize sprite coordinates
ld hd,SpriteInitData
ld de,SpriteAttribs
ld bc,4*2
ldir



mainLoop: 

  call UpdateSprites ; draw mice

checkForPort1:
  xor a 
  call TestMouse    ;H = X-offset, L = Y-offset 
  jr C checkForPort2
  ; update coordinates
  push hl
 

  ld a,l
  add a,a ; sign bit to carry
  sbc a,a ; extend signal bit
  ld d,a
  ld e,l  ; de now has signed 16 bit y offset
  ld hl,(M1pos16)
  add hl,de
  
  ; limit ranges
  




  ld a,h
  ld (M1X),a
  ld a,l
  ld (M1Y),a
  ; test buttons
  ld e,0 
  ld a,1
  call GTTRIG
  rrc a
  rlc e
  ld a,2
  call GTTRIG
  rrc a
  rlc e
  ld e,a  ; e = 0 0 0 0 0 0 lb rb 
  ld (M1Pattern),a


checkForPort1:
  ld a,1 
  call TestMouse
  jr C TakeSomeTime



TakeSomeTime:

  











;
; main loop

; test for mouse 1
; get coordinates if present
; get button state if pressed
; test for mouse 2
; update coordinates if present
; update button state if pressed

; take some time
; the repeat

jr mainLoop 





; initialize sprite coordinates
UpdateSprites:
ld HL,SpriteAttribs
ld DE,0x1b00
ld BC,4*2
call LDIRVM
ret
;




;
; Input A=0 = port 1
;       A>0 = port 2
;
; Output H = X offset
;        L = Y offset
;        Cy: 1 - no mouse present
;            0 - mouse is present
TestMouse:
    or a
    ld de,0x9310  ; parameter for mouse on port 1
    jr z,Tstm1    ; zero? test port 1
    ld de,0xec20  ; nz -> test port 2
Tstm1:
    call GTMOUS   ; 

    ld a,h
    inc a
    ret nc
    ld a,l
    inc a
    ret 



; Routine to read the mouse by direct accesses (works on MSX1/2/2+/turbo R)
;
; Input: DE = 09310h for mouse in port 1 (D = 10010011b, E = 00010000b)
; 	 DE = 0EC20h for mouse in port 2 (D = 11101100b, E = 00100000b)
; Output: H = X-offset, L = Y-offset (H = L = 255 if no mouse)




 
WAIT1:  equ   10              ; Short delay value
WAIT2:  equ   30              ; Long delay value
 
GTMOUS:
	ld	b,WAIT2	; Long delay for first read
	call	GTOFS2	; Read bits 7-4 of the x-offset
	and	0Fh
	rlca
	rlca
	rlca
	rlca
	ld	c,a
	call	GTOFST	; Read bits 3-0 of the x-offset
	and	0Fh
	or	c
	ld	h,a	; Store combined x-offset
	call	GTOFST	; Read bits 7-4 of the y-offset
	and	0Fh
	rlca
	rlca
	rlca
	rlca
	ld	c,a
	call	GTOFST	; Read bits 3-0 of the y-offset
	and 0Fh
	or c
	ld l,a		; Store combined y-offset
	ret
 
GTOFST:	ld b,WAIT1
GTOFS2:	ld a,15		; Read PSG register 15 for mouse
	di		; DI useless if the routine is used during an interrupt
	out (0A0h),a
	ld a,d
	out (0A1h),a
	xor e
	ld d,a
 
	call WAITMS	; Extra delay because the mouse is slow
 
	ld a,14
	out (0A0h),a
	ei		; EI useless if the routine is used during an interrupt
	in a,(0A2h)
	ret
WAITMS:
	ld	a,b
WTTR:
	djnz	WTTR
	db	0EDh,055h	; Back if Z80 (RETN on Z80, NOP on R800)
	rlca
	rlca
	ld	b,a
WTTR2:
	djnz	WTTR2
	ld	b,a	
WTTR3:
	djnz	WTTR3
	ret



;
;  SPRITES
;
;   1  2
;   3  4
SpritePatterns:
; mouse no buttons
db 07,0f,0f,1f,1f,1f,00,1f
db 70,78,78,7c,7c,7c,00,7c
db 1f,1f,1f,1f,0f,0f,07,03
db fc,fc,fc,fc,f8,f8,f0,e0

; mouse left button press
db 05,0a,0d,oa,15,0a,00,1f
db 70,78,78,7c,7c,7c,00,7c
db 1f,1f,1f,1f,0f,0f,07,03
db fc,fc,fc,fc,f8,f8,f0,e0

; mouse right button press
db 07,0f,0f,1f,1f,1f,00,1f
db 50,28,58,2c,54,28,00,7c
db 1f,1f,1f,1f,0f,0f,07,03
db fc,fc,fc,fc,f8,f8,f0,e0

; mouse both button press
db 05,0a,0d,oa,15,0a,00,1f
db 50,28,58,2c,54,28,00,7c
db 1f,1f,1f,1f,0f,0f,07,03
db fc,fc,fc,fc,f8,f8,f0,e0


SpriteAttribs:
db 96, 64,0,3  ; port 1 mouse
db 96,192,0,5  ; port 2 mouse

;
;  VARIABLES
;
;
; mouse 1/2 attributes coordinates
; vertical
; Horizontal
; pattern number
; ec 0 0 0 color
;
SpriteAttribs:
M1Y: db 0
M1X: db 0
M1Pattern: db 0
M1Color:   db 0
;
M2Y: db 0
M2X: db 0
M2Pattern: db 0
M2Color:   db 0


X1pos16: dw 64
Y1pos16: dw 96
X2pos16: dw 192
Y2pos16: dw 96

;TTRIG

;ddress  : #00D8
;unction : Returns current trigger status
;nput    : A  - trigger button to test
;          0 = spacebar
;          1 = port 1, button A
;          2 = port 2, button A
;          3 = port 1, button B
;          4 = port 2, button B
;utput   : A  - #00 trigger button not pressed
;               #FF trigger button pressed
;egisters: AF
